<div class="container">
  <div class="card-panel hide" id="didAuthPanel">
    <h4>Login Request</h4>

    <p>
      <strong>Source:</strong> <code id="requestSource"></code>
    </p>

    <a class="waves-effect waves-light btn" id="authButton">Allow</a>
    <a class="waves-effect waves-light btn" id="cancelButton">Cancel</a>
  </div>
</div>

<script>
  /**
   * Globals:
   *   WALLET_LOCATION, MEDIATOR - wallet.hbs layout
   *
   *  * credentialHandlerPolyfill - from credential-handler-polyfill.min.js.
   *      This provides the get() and store() Credential Handler API calls.
   *
   *  * WebCredentialHandler - from web-credential-handler.min.js.
   *      Utility/convenience library for the CHAPI polyfill, useful for wallet
   *      implementors.
   */
  async function handleGetEvent () {
    const event = await WebCredentialHandler.receiveCredentialEvent()

    console.log('Wallet processing get() event:', event)

    // document.getElementById('requestOrigin').innerHTML = event.credentialRequestOrigin

    const vp = event.credentialRequestOptions.web.VerifiablePresentation
    const query = Array.isArray(vp.query) ? vp.query[0] : vp.query

    if(!['QueryByExample', 'DIDAuth'].includes(query.type)) {
      throw new Error(`Query type ${query.type} is not supported by this wallet.`)
    }

    const requestSource = event.credentialRequestOrigin
    document.getElementById('requestSource').innerHTML = requestSource

    if (query.type === 'DIDAuth') {
      document.getElementById('didAuthPanel').classList.remove('hide')

      // Communicate with server, get an auth VP response
      const { domain, challenge } = vp
      const data = await fetchDidAuthVp({ domain, challenge })

      // Authenticate/Login button
      document.getElementById('authButton').addEventListener('click', () => {
        // const data = JSON.parse(document.getElementById('responseText').value)
        event.respondWith(Promise.resolve({dataType: 'VerifiablePresentation', data}))
      })
    }

    // Cancel button
    document.getElementById('cancelButton').addEventListener('click', () => {
      event.respondWith(Promise.resolve({dataType: 'Response', data: 'error'}))
    })

    // const requestReason = query.credentialQuery.reason
    // document.getElementById('requestReason').innerHTML = requestReason

    // refreshUserArea({
    //   shareButton: {
    //     text: 'Share',
    //     sourceEvent: event
    //   }
    // })

    // const requestOptions = event.credentialRequestOptions || {web:{}}
    // document.getElementById('queryContents').innerHTML = JSON.stringify(requestOptions.web, null, 2)

    // Respond button
    // document.getElementById('respondBtn').addEventListener('click', () => {
    //   const data = JSON.parse(document.getElementById('responseText').value)
    //
    //   event.respondWith(Promise.resolve({dataType: 'VerifiablePresentation', data}))
    // })
  }

  async function fetchDidAuthVp ({ domain, challenge }) {
    // @see https://transmute-industries.github.io/vc-http-api/#/Holder/provePresentation
    const url = new URL('/api/prove/presentations', WALLET_LOCATION)
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ domain, challenge })
      })
      if (!response.ok) {
        throw new Error(`Error fetching authn vp: ${response.status} ${response.statusText}`)
      }
      return response.json()
    } catch (error) {
      console.error(error)
      return { error: error.message }
    }
  }

  onDocumentReady(() => {
    // document.getElementById('loginButton').addEventListener('click', login)
    // document.getElementById('logoutButton').addEventListener('click', logout)
  })

  credentialHandlerPolyfill
    .loadOnce(MEDIATOR)
    .then(handleGetEvent)
</script>
