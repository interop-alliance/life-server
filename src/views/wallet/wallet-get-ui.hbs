<div class="container">
  <div class="card-panel">
    <h4>Credential Request</h4>

    <p>
      <strong>Request Origin:</strong> <code id="requestOrigin"></code>
    </p>
    <p>is requesting the following:</p>

    <ul id="requestItems">
      <li class="hide" id="didAuthItem">Login request (your DID)</li>
      <li class="hide" id="accessTokenItem">SolidOIDC Access Token (to read from/write to your online storage)</li>
    </ul>
  </div>

  <div class="card-panel hide" id="actionButtons">
    <a class="waves-effect waves-light btn" id="allowButton">Allow</a>
    <a class="waves-effect waves-light btn" id="cancelButton">Cancel</a>
  </div>
</div>

<script>
  /**
   * Globals:
   *   WALLET_LOCATION, MEDIATOR - wallet.hbs layout
   *
   *  * credentialHandlerPolyfill - from credential-handler-polyfill.min.js.
   *      This provides the get() and store() Credential Handler API calls.
   *
   *  * WebCredentialHandler - from web-credential-handler.min.js.
   *      Utility/convenience library for the CHAPI polyfill, useful for wallet
   *      implementors.
   */
  async function handleGetEvent () {
    const event = await WebCredentialHandler.receiveCredentialEvent()

    console.log('Wallet processing get() event:', event)
    document.getElementById('requestOrigin').innerHTML = event.credentialRequestOrigin

    const {
      query, challenge, domain, supportedProofTypes
    }  = event.credentialRequestOptions.web.VerifiablePresentation

    // Set up the Cancel button
    document.getElementById('cancelButton').addEventListener('click', () => {
      event.respondWith(Promise.resolve({dataType: 'Response', data: 'error'}))
    })

    handleVpQuery({ event, query, challenge, domain, supportedProofTypes })
  }

  /**
   * @param event {Event}
   * @param query {object}
   * @param challenge {string}
   * @param domain {string}
   * @param supportedProofTypes {string[]}
   * @returns {Promise<void>}
   */
  async function handleVpQuery ({ event, query, challenge, domain, supportedProofTypes }) {
    validateSupportedProofTypes ({ supportedProofTypes })

    query = [].concat(query)

    if (query.find(q => q.type === 'DIDAuth')) {
      document.getElementById('didAuthItem').classList.remove('hide')
    }
    if (query.find(q => q.type === 'SolidOidcCredential')) {
      document.getElementById('accessTokenItem').classList.remove('hide')
    }

    const credRequest = query.find(q => q.type === 'QueryByExample')
    if (credRequest) {
      const requestItems = document.getElementById('requestItems')
      for (const cred of credRequest.credentialQuery) {
        requestItems.append(
          document.createElement('li').appendChild(
            document.createTextNode(cred.example.type)
          )
        )
      }
    }

    // Allow/Login button
    document.getElementById('allowButton').addEventListener('click', async () => {
      // Communicate with server, get a signed VP containing the requested credentials
      const response = await requestVp({ query, challenge, domain })
      console.log('CHAPI response:', response)

      event.respondWith(Promise.resolve({dataType: 'VerifiablePresentation', data: response}))
    })
  }

  function validateSupportedProofTypes ({ supportedProofTypes }) {
    // todo: ensure it's either blank, or Ed25519Signature2020 is supported
  }

  async function requestVp ({ query, challenge, domain }) {
    // const url = new URL('/api/presentations/verify', WALLET_LOCATION)
    const url = new URL('/api/wallet/vp-request', WALLET_LOCATION)
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query, domain, challenge })
      })
      if (!response.ok) {
        console.log('Error fetching:', await response.json())
        throw new Error(`Error fetching vp request: ${response.status} ${response.statusText}`)
      }
      return response.json()
    } catch (error) {
      console.error(error)
      return { error: error.message }
    }
  }

  onDocumentReady(() => {
    // document.getElementById('loginButton').addEventListener('click', login)
    // document.getElementById('logoutButton').addEventListener('click', logout)
  })

  credentialHandlerPolyfill
    .loadOnce(MEDIATOR)
    .then(handleGetEvent)
</script>
