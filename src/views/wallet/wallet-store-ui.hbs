<div class="container">
  <h4>Wallet Store</h4>
</div>
<div class="container">
  <div class="card-panel" id="logged-in">
    <div id="confirm">
      <p>Do you wish to store this credential?</p>

      <p><strong>type:</strong> <span id="credentialType"></span></p>

      <p><strong>issuer:</strong> <span id="credentialIssuer"></span></p>

      <a class="waves-effect waves-light btn" id="confirmButton">Confirm</a>
      <a class="waves-effect waves-light btn" id="cancelButton">Cancel</a>
    </div>

    <div id="userArea" class="hide">
      <p><strong>Credential stored!</strong></p>

<!--      <h6>Wallet Contents:</h6>-->
<!--      <ol id="walletContents"></ol>-->

      <a class="waves-effect waves-light btn center" id="doneButton">Done</a>
    </div>
  </div>
</div>

<script>
  /**
   * Globals:
   *   WALLET_LOCATION, MEDIATOR - wallet.hbs layout
   *
   *  * credentialHandlerPolyfill - from credential-handler-polyfill.min.js.
   *      This provides the get() and store() Credential Handler API calls.
   *
   *  * WebCredentialHandler - from web-credential-handler.min.js.
   *      Utility/convenience library for the CHAPI polyfill, useful for wallet
   *      implementors.
   */

  async function handleStoreEvent() {
    const event = await WebCredentialHandler.receiveCredentialEvent()
    console.log('Store Credential Event:', event.type, event)

    const credential = event.credential

    // document.getElementById('requestOrigin').innerHTML = event.credentialRequestOrigin;
    // document.getElementById('hintKey').innerHTML = credential.hintKey || '';
    // document.getElementById('credentialContents').innerHTML = JSON.stringify(credential.data, null, 2);

    // Display the credential details, for confirmation
    const vp = credential.data
    const vc = Array.isArray(vp.verifiableCredential)
      ? vp.verifiableCredential[0]
      : vp.verifiableCredential

    console.log('Incoming vc:', JSON.stringify(vc, null, 2))

    document.getElementById('credentialType').innerHTML = vc.type[0]
    document.getElementById('credentialIssuer').innerHTML = vc.issuer

    // Set up the event handlers for the buttons
    document.getElementById('cancelButton').addEventListener('click', () => {
      returnToUser(event, null); // Do nothing, close the CHAPI window
    })

    document.getElementById('confirmButton').addEventListener('click', () => {
      document.getElementById('userArea').classList.remove('hide');
      document.getElementById('confirm').classList.add('hide');

      storeInWallet(credential.data); // in mock-user-management.js
      // refreshUserArea();
    });

    document.getElementById('doneButton').addEventListener('click', () => {
      returnToUser(event, vp);
    });
  }

  function storeInWallet(vcData) {
    console.log('Storing:', vcData)
    const filename = `${vcData.id || 'test-vc'}.txt`
    const url = `{{userUri}}/vault/vcs/`
    console.log('STORING URL:', url)
    return fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain' },
      body: JSON.stringify(vcData)
    })
  }

  /**
   * @param storeEvent
   * @param {VerifiablePresentation|null} data - Return (to client application)
   *   exactly what was stored, or a `null` if canceled by the user.
   */
  function returnToUser(storeEvent, data) {
    storeEvent.respondWith(new Promise(resolve => {
      return data
        ? resolve({dataType: 'VerifiablePresentation', data})
        : resolve(null);
    }))
  }

  onDocumentReady(() => {
    // document.getElementById('loginButton').addEventListener('click', login);
    // document.getElementById('logoutButton').addEventListener('click', logout);
    // refreshUserArea();
  })

  credentialHandlerPolyfill
    .loadOnce(MEDIATOR)
    .then(handleStoreEvent);
</script>
